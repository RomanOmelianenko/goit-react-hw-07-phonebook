{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/helpers/Loader.module.css","redux/contacts/contactsActions.js","redux/contacts/contactsSelectors.js","redux/contacts/contactsOperations.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","components/Header/Header.js","components/Logo/logo.svg","components/Logo/Logo.js","components/ShowModal/ShowModalWarning.js","components/helpers/Loader.js","components/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","actions","addContactRequest","createAction","addContactSuccess","addContactError","fetchContactsRequest","fetchContactsSuccess","fetchContactsError","removeContactRequest","removeContactSuccess","removeContactError","changeFilter","showModalWarning","getFilter","state","contacts","filter","selestors","getModalwarning","modalWarning","getContactsItems","contactsItems","getLoading","loading","getVisibleContacts","createSelector","item","text","name","toLowerCase","includes","axios","defaults","baseURL","operations","addContact","dispatch","contactsActions","post","then","response","data","catch","error","fetchContacts","get","removeContact","id","delete","ContactForm","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","sameNameContact","props","map","contact","inputNumber","Number","onSameNameContact","setTimeout","length","alert","onAddContact","className","styles","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","type","placeholder","autoComplete","autoFocus","onChange","TaskEditor_button","Component","mapDispatchToProps","contactsOperations","connect","contactsSelectors","onRemoveContact","TransitionGroup","component","CSSTransition","timeout","classNames","onClick","onChangeFilter","Header","Logo","src","logo","alt","ShowModalWarning","Spinner","Loader","color","height","width","App","onFetchContacts","in","appear","unmountOnExit","stage","isLoadingContacts","createReducer","action","payload","combineReducers","store","configureStore","reducer","contactReducer","ReactDom","render","document","querySelector"],"mappings":"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","file":"static/js/main.362fdc4a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__3-kzN\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__3T5FJ\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__2U9J1\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput__2TrTe\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__3MLjh\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Loader\":\"Loader_Loader__1fUys\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactRequest = createAction('contacts/addRequest');\r\nconst addContactSuccess = createAction('contacts/addSuccess');\r\nconst addContactError = createAction('contacts/addError');\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchError');\r\n\r\nconst removeContactRequest = createAction('contacts/removeRequest');\r\nconst removeContactSuccess = createAction('contacts/removeSuccess');\r\nconst removeContactError = createAction('contacts/removeError');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst showModalWarning = createAction('contacts/modalWarning');\r\n\r\nconst actions = {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n\r\n    removeContactRequest,\r\n    removeContactSuccess,\r\n    removeContactError,\r\n   \r\n    changeFilter,\r\n    showModalWarning\r\n};\r\n\r\nexport default actions;","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getContacts = state => state.contacts.contactsItems;\r\nconst getModalwarning = state => state.contacts.modalWarning;\r\nconst getContactsItems = state => state.contacts.contactsItems;\r\nconst getLoading = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getVisibleContacts = createSelector([getContacts, getFilter], (contactsItems, filter) => {\r\n    return contactsItems.filter(item =>\r\n        item.text.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n});\r\n\r\nconst selestors = {\r\n    getModalwarning,\r\n    getContactsItems,\r\n    getLoading,\r\n    getFilter,\r\n    getVisibleContacts,\r\n};\r\n\r\nexport default selestors;","import axios from 'axios';\r\nimport contactsActions from './contactsActions';\r\n\r\naxios.defaults.baseURL = 'http://localhost:2000';\r\n\r\nconst addContact = text => dispatch => {\r\n\r\n    dispatch(contactsActions.addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', { text })\r\n        .then(response => dispatch(contactsActions.addContactSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.addContactError(error)))\r\n};\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(contactsActions.fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(response => dispatch(contactsActions.fetchContactsSuccess(response.data)))\r\n        .catch(error => dispatch(contactsActions.fetchContactsError(error)))\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n    dispatch(contactsActions.removeContactRequest());\r\n\r\n    axios\r\n        .delete(`/contacts/${id}`)\r\n        .then(() => dispatch(contactsActions.removeContactSuccess(id)))\r\n        .catch(error => dispatch(contactsActions.removeContactError(error)))\r\n};\r\n\r\nconst operations = {\r\n    addContact,\r\n    fetchContacts,\r\n    removeContact\r\n};\r\n\r\nexport default operations;","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n    static propTypes = {\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n        onAddContact: PropTypes.func.isRequired\r\n    };\r\n    \r\n    state = {\r\n        name: \"\",\r\n        number: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value } = e.target;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        \r\n        const { name, number } = this.state;\r\n\r\n        const sameNameContact = this.props.contactsItems\r\n            .map(contact => contact.text.name)\r\n            .includes(name);\r\n        \r\n        const inputNumber = Number(number)\r\n\r\n        if (sameNameContact) {\r\n            this.props.onSameNameContact();\r\n            setTimeout(() => {\r\n                this.props.onSameNameContact();\r\n            }, 1500);\r\n        } else if (name.length === 0) {\r\n            alert(\"Field 'Name' must be filled!\");\r\n        } else if (number.length === 0) {\r\n            alert(\"Field 'Number' must be filled!\")\r\n        } else if (!inputNumber) {\r\n            alert(\"Insert the number\")\r\n        } else {\r\n            this.props.onAddContact({ ...this.state });\r\n        }\r\n\r\n        this.setState({ name: \"\", number: \"\" });\r\n    };\r\n  \r\n    render() {\r\n        return (\r\n            <form\r\n                className={styles.TaskEditor}\r\n                onSubmit={this.handleSubmit}>\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Name\r\n                        <input\r\n                            className={styles.TaskEditor_input}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            placeholder=\"Your name\"\r\n                            autoComplete=\"off\"\r\n                            autoFocus=\"on\"\r\n                            value={this.state.name}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                </label>\r\n\r\n                <label\r\n                    className={styles.TaskEditor_label}>\r\n                    Number\r\n                    <input\r\n                        className={styles.TaskEditor_input}\r\n                        type=\"text\"\r\n                        name=\"number\"\r\n                        placeholder=\"Your number\"\r\n                        autoComplete=\"off\"\r\n                        value={this.state.number}\r\n                        onChange={this.handleChange}\r\n                    />\r\n                </label>\r\n\r\n                <button\r\n                    className={styles.TaskEditor_button}\r\n                    type=\"submit\">\r\n                    Add contact\r\n                </button>\r\n            </form>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n      contactsItems: contactsSelectors.getContactsItems(state),\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onAddContact: contactsOperations.addContact,\r\n    onSameNameContact: contactsActions.showModalWarning\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './ContactList.css';\r\nimport contactsOperations from '../../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst ContactList = ({ contacts, onRemoveContact }) => (\r\n    <TransitionGroup\r\n        component=\"ul\"\r\n        className=\"TaskList\">\r\n            \r\n        {contacts.map(({id, text}) => (\r\n            <CSSTransition\r\n                key={id}\r\n                timeout={250}\r\n                classNames=\"ContactListAppear\"\r\n                // unmountOnExit\r\n            >\r\n                <li\r\n                    className=\"TaskList_item\"\r\n                    /*key={contact.id}*/>\r\n                    {text.name}: {text.number}\r\n                    {\r\n                        <button\r\n                            className=\"TaskList_button\"\r\n                            type=\"button\"\r\n                            name=\"delete\"\r\n                            onClick={() => onRemoveContact(id)}\r\n                        >\r\n                            x\r\n                        </button>\r\n                    }\r\n                </li>\r\n            </CSSTransition>\r\n        ))}\r\n    </TransitionGroup>\r\n);\r\n    \r\n\r\nContactList.propTypes = {\r\n    contacts: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n            id: PropTypes.number,\r\n            name: PropTypes.string,\r\n            number: PropTypes.string,\r\n        })),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    contacts: contactsSelectors.getVisibleContacts(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onRemoveContact: contactsOperations.removeContact\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport './Filter.css';\r\nimport contactsActions from '../../redux/contacts/contactsActions';\r\nimport contactsSelectors from '../../redux/contacts/contactsSelectors';\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n    <div className=\"Filter\">\r\n        <h2 className=\"FilterName\">Find contacts by name</h2>\r\n        <input className=\"FilterInput\"\r\n            type=\"text\"\r\n            placeholder=\"Enter name\"\r\n            value={value}\r\n            onChange={e => onChangeFilter(e.target.value)}\r\n        />\r\n    </div>\r\n);\r\n\r\nFilter.propTypes = {\r\n    value: PropTypes.string,\r\n    onChangeFilter: PropTypes.func.isRequired\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n    value: contactsSelectors.getFilter(state)\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n    onChangeFilter: contactsActions.changeFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <h1 className=\"HeaderName\">Phonebook</h1>\r\n  );\r\n}\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\r\nimport './Logo.css';\r\n\r\nfunction Logo() {\r\n    return (\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n    );\r\n};\r\n\r\nexport default Logo;","import React from 'react';\r\nimport './ShowModalWarning.css';\r\n\r\nconst ShowModalWarning = () => (\r\n    <div\r\n        className=\"Modal\">\r\n        <p className=\"Modal-message\">\r\n            Contact already exist!\r\n        </p>\r\n    </div>\r\n);\r\n\r\nexport default ShowModalWarning;\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport styles from './Loader.module.css';\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <Loader\r\n            className={styles.Loader}\r\n            type=\"Circles\"\r\n            color=\"#3f51b5\"\r\n            height={60}\r\n            width={60}\r\n        />\r\n    )\r\n};\r\n\r\nexport default Spinner;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport PropTypes from 'prop-types';\r\nimport ContactForm from './ContactForm/ContactForm';\r\nimport ContactList from './ContactList/ContactList';\r\nimport Filter from './Filter/Filter';\r\nimport Header from './Header/Header';\r\nimport Logo from './Logo/Logo';\r\nimport ShowModalWarning from './ShowModal/ShowModalWarning';\r\nimport Loader from './helpers/Loader';\r\nimport contactsOperations from '../redux/contacts/contactsOperations';\r\nimport contactsSelectors from '../redux/contacts/contactsSelectors';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n\r\n    static propTypes = {\r\n        modalWarning: PropTypes.bool.isRequired,\r\n        contactsItems: PropTypes.array.isRequired,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.props.onFetchContacts();\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Wrapper\">\r\n\r\n                <CSSTransition\r\n                    in={true}\r\n                    appear={true}\r\n                    timeout={500}\r\n                    classNames=\"HeaderAppear\"\r\n                    unmountOnExit\r\n                >\r\n                {stage => {\r\n                    // console.log(stage);\r\n                    return (\r\n                        <div className=\"Header\">\r\n                            <Header />\r\n                            <CSSTransition\r\n                                in={stage === 'entered'}\r\n                                timeout={500}\r\n                                classNames=\"LogoAppear\"\r\n                                unmountOnExit\r\n                            >\r\n                                <Logo />\r\n                            </CSSTransition>\r\n                        </div>\r\n                    )\r\n                }}\r\n                </CSSTransition>\r\n            \r\n                    <ContactForm/>\r\n\r\n                <CSSTransition\r\n                    in={this.props.contactsItems.length > 1}\r\n                    timeout={250}\r\n                    classNames=\"FilterAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <Filter/>\r\n                </CSSTransition>\r\n\r\n                {this.props.isLoadingContacts && <Loader />}\r\n                \r\n                <CSSTransition\r\n                    in={this.props.contactsItems.length > 0}\r\n                    timeout={250}\r\n                    classNames=\"ContactsAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <h2 className=\"ContactsName\">\r\n                        Contacts\r\n                    </h2>\r\n                </CSSTransition>\r\n                \r\n                <CSSTransition\r\n                    in={this.props.contactsItems.length > 0}\r\n                    timeout={250}\r\n                    classNames=\"ContactListApp\"\r\n                    unmountOnExit\r\n                >\r\n                    <ContactList/>\r\n                </CSSTransition>\r\n\r\n                <CSSTransition\r\n                    in={this.props.modalWarning}\r\n                    timeout={250}\r\n                    classNames=\"ShowModalAppear\"\r\n                    unmountOnExit\r\n                >\r\n                    <ShowModalWarning />\r\n                </CSSTransition>\r\n               \r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        modalWarning: contactsSelectors.getModalwarning(state),\r\n        contactsItems: contactsSelectors.getContactsItems(state),\r\n        isLoadingContacts: contactsSelectors.getLoading(state)\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    onFetchContacts: contactsOperations.fetchContacts\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport contactsActions from './contactsActions';\r\n\r\nconst onAddContact = (state, action) => {\r\n    return [...state, action.payload]\r\n};\r\nconst onRemoveContact = (state, action) => {\r\n    return state.filter(contact => contact.id !== action.payload)\r\n};\r\nconst onAddFilter = (state, action) => action.payload;\r\n\r\nconst onShowModal = (state, action) => {\r\n    return !state\r\n};\r\n\r\n\r\nconst contactsItems = createReducer([], {\r\n    [contactsActions.fetchContactsSuccess]: (state, action) => action.payload,  \r\n    [contactsActions.addContactSuccess]: onAddContact,\r\n    [contactsActions.removeContactSuccess]: onRemoveContact\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [contactsActions.changeFilter]: onAddFilter\r\n});\r\n\r\nconst modalWarning = createReducer(false, {\r\n    [contactsActions.showModalWarning]: onShowModal\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n   \r\n    [contactsActions.addContactRequest]: () => true,\r\n    [contactsActions.addContactSuccess]: () => false,\r\n    [contactsActions.addContactError]: () => false,\r\n\r\n    [contactsActions.fetchContactsRequest]: () => true,\r\n    [contactsActions.fetchContactsSuccess]: () => false,\r\n    [contactsActions.fetchContactsError]: () => false,\r\n\r\n    [contactsActions.removeContactRequest]: () => true,\r\n    [contactsActions.removeContactSuccess]: () => false,\r\n    [contactsActions.removeContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n    contactsItems,\r\n    filter,\r\n    modalWarning,\r\n    loading\r\n});","import { configureStore } from '@reduxjs/toolkit';\r\nimport contactReducer from './contacts/contactsReducer';\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactReducer\r\n    },\r\n});\r\n\r\nexport default store;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './components/App';\nimport store from './redux/store';\n\n// console.log(store.getState());\n\nReactDom.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.querySelector('#root'));"],"sourceRoot":""}